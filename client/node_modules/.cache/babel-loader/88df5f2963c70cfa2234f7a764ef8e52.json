{"ast":null,"code":"/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:8080\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\nasync function fetchJson(url, options) {\n  try {\n    const response = await fetch(url, options);\n    if (response.status === 204) {\n      return null;\n    }\n    const payload = await response.json();\n    if (payload.error) {\n      return Promise.reject({\n        message: payload.error\n      });\n    }\n    return payload.data;\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n  }\n}\n\n/**\n * Retrieves all existing dishes.\n * @returns {Promise<[dish]>}\n *  a promise that resolves to a possibly empty array of dishes saved in the database.\n */\nexport async function listDishes(signal) {\n  const url = `${API_BASE_URL}/dishes`;\n  return await fetchJson(url, {\n    signal\n  });\n}\n\n/**\n * Creates a new order\n * @returns {Promise<[order]>}\n *  a promise that resolves to the newly created order.\n */\nexport async function createOrder(order, signal) {\n  const url = `${API_BASE_URL}/orders`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify({\n      data: order\n    }),\n    signal\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the order with the specified `orderId`\n * @param orderId\n *  the `id` property matching the desired order.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<order>}\n *  a promise that resolves to the saved order.\n */\nexport async function readOrder(orderId, signal) {\n  const url = `${API_BASE_URL}/orders/${orderId}`;\n  return await fetchJson(url, {\n    signal\n  });\n}\n\n/**\n * Retrieves all existing orders.\n * @returns {Promise<[order]>}\n *  a promise that resolves to a possibly empty array of orders saved in the database.\n */\nexport async function listOrders(signal) {\n  const url = `${API_BASE_URL}/orders`;\n  return await fetchJson(url, {\n    signal\n  });\n}\n\n/**\n * Updates a existing order\n * @returns {Promise<[order]>}\n *  a promise that resolves to the update order.\n */\nexport async function updateOrder(order, signal) {\n  const url = `${API_BASE_URL}/orders/${order.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify({\n      data: order\n    }),\n    signal\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the order with the specified `orderId`.\n * @param orderId\n *  the id of the order to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<null|String>}\n *  a promise that resolves to null or an error message.\n */\nexport async function deleteOrder(orderId, signal) {\n  const url = `${API_BASE_URL}/orders/${orderId}`;\n  const options = {\n    method: \"DELETE\",\n    signal\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Creates a new dish\n * @returns {Promise<[dish]>}\n *  a promise that resolves to the newly created dish.\n */\nexport async function createDish(dish, signal) {\n  const url = `${API_BASE_URL}/dishes`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify({\n      data: dish\n    }),\n    signal\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the order with the specified `dishId`\n * @param dishId\n *  the `id` property matching the desired dish.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<dish>}\n *  a promise that resolves to the saved dish.\n */\nexport async function readDish(dishId, signal) {\n  const url = `${API_BASE_URL}/dishes/${dishId}`;\n  return await fetchJson(url, {\n    signal\n  });\n}\n\n/**\n * Updates a existing dish\n * @returns {Promise<[dish]>}\n *  a promise that resolves to the updated dish.\n */\nexport async function updateDish(dish, signal) {\n  const url = `${API_BASE_URL}/dishes/${dish.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify({\n      data: dish\n    }),\n    signal\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the order with the specified `dishId`.\n * @param dishId\n *  the id of the order to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<null|String>}\n *  a promise that resolves to null or an error message.\n */\nexport async function deleteDish(dishId, signal) {\n  const url = `${API_BASE_URL}/dishes/${dishId}`;\n  const options = {\n    method: \"DELETE\",\n    signal\n  };\n  return await fetchJson(url, options);\n}","map":{"version":3,"names":["API_BASE_URL","process","env","headers","Headers","append","fetchJson","url","options","response","fetch","status","payload","json","error","Promise","reject","message","data","name","console","stack","listDishes","signal","createOrder","order","method","body","JSON","stringify","readOrder","orderId","listOrders","updateOrder","id","deleteOrder","createDish","dish","readDish","dishId","updateDish","deleteDish"],"sources":["/Users/oscarlosgomezrosario/Desktop/school project repos/Grub-Dash/client/src/utils/api.js"],"sourcesContent":["/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:8080\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\nasync function fetchJson(url, options) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    const payload = await response.json();\n\n    if (payload.error) {\n      return Promise.reject({ message: payload.error });\n    }\n    return payload.data;\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n  }\n}\n\n/**\n * Retrieves all existing dishes.\n * @returns {Promise<[dish]>}\n *  a promise that resolves to a possibly empty array of dishes saved in the database.\n */\nexport async function listDishes(signal) {\n  const url = `${API_BASE_URL}/dishes`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Creates a new order\n * @returns {Promise<[order]>}\n *  a promise that resolves to the newly created order.\n */\nexport async function createOrder(order, signal) {\n  const url = `${API_BASE_URL}/orders`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify({ data: order }),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the order with the specified `orderId`\n * @param orderId\n *  the `id` property matching the desired order.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<order>}\n *  a promise that resolves to the saved order.\n */\nexport async function readOrder(orderId, signal) {\n  const url = `${API_BASE_URL}/orders/${orderId}`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Retrieves all existing orders.\n * @returns {Promise<[order]>}\n *  a promise that resolves to a possibly empty array of orders saved in the database.\n */\nexport async function listOrders(signal) {\n  const url = `${API_BASE_URL}/orders`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Updates a existing order\n * @returns {Promise<[order]>}\n *  a promise that resolves to the update order.\n */\nexport async function updateOrder(order, signal) {\n  const url = `${API_BASE_URL}/orders/${order.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify({ data: order }),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the order with the specified `orderId`.\n * @param orderId\n *  the id of the order to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<null|String>}\n *  a promise that resolves to null or an error message.\n */\nexport async function deleteOrder(orderId, signal) {\n  const url = `${API_BASE_URL}/orders/${orderId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Creates a new dish\n * @returns {Promise<[dish]>}\n *  a promise that resolves to the newly created dish.\n */\nexport async function createDish(dish, signal) {\n  const url = `${API_BASE_URL}/dishes`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify({ data: dish }),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the order with the specified `dishId`\n * @param dishId\n *  the `id` property matching the desired dish.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<dish>}\n *  a promise that resolves to the saved dish.\n */\nexport async function readDish(dishId, signal) {\n  const url = `${API_BASE_URL}/dishes/${dishId}`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Updates a existing dish\n * @returns {Promise<[dish]>}\n *  a promise that resolves to the updated dish.\n */\nexport async function updateDish(dish, signal) {\n  const url = `${API_BASE_URL}/dishes/${dish.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify({ data: dish }),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the order with the specified `dishId`.\n * @param dishId\n *  the id of the order to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<null|String>}\n *  a promise that resolves to null or an error message.\n */\nexport async function deleteDish(dishId, signal) {\n  const url = `${API_BASE_URL}/dishes/${dishId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}